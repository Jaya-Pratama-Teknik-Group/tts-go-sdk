/*
tiktok shop openapi

sdk for apis

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package product_v202309

import (
	"encoding/json"
	"github.com/Jaya-Pratama-Teknik-Group/tts-go-sdk/utils"
)

// checks if the Product202309PublishGlobalProductResponseDataPublishResultFailReasons type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Product202309PublishGlobalProductResponseDataPublishResultFailReasons{}

// Product202309PublishGlobalProductResponseDataPublishResultFailReasons struct for Product202309PublishGlobalProductResponseDataPublishResultFailReasons
type Product202309PublishGlobalProductResponseDataPublishResultFailReasons struct {
	// The error message.
	Message              *string `json:"message,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Product202309PublishGlobalProductResponseDataPublishResultFailReasons Product202309PublishGlobalProductResponseDataPublishResultFailReasons

// NewProduct202309PublishGlobalProductResponseDataPublishResultFailReasons instantiates a new Product202309PublishGlobalProductResponseDataPublishResultFailReasons object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProduct202309PublishGlobalProductResponseDataPublishResultFailReasons() *Product202309PublishGlobalProductResponseDataPublishResultFailReasons {
	this := Product202309PublishGlobalProductResponseDataPublishResultFailReasons{}
	return &this
}

// NewProduct202309PublishGlobalProductResponseDataPublishResultFailReasonsWithDefaults instantiates a new Product202309PublishGlobalProductResponseDataPublishResultFailReasons object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProduct202309PublishGlobalProductResponseDataPublishResultFailReasonsWithDefaults() *Product202309PublishGlobalProductResponseDataPublishResultFailReasons {
	this := Product202309PublishGlobalProductResponseDataPublishResultFailReasons{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *Product202309PublishGlobalProductResponseDataPublishResultFailReasons) GetMessage() string {
	if o == nil || utils.IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Product202309PublishGlobalProductResponseDataPublishResultFailReasons) GetMessageOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *Product202309PublishGlobalProductResponseDataPublishResultFailReasons) HasMessage() bool {
	if o != nil && !utils.IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *Product202309PublishGlobalProductResponseDataPublishResultFailReasons) SetMessage(v string) {
	o.Message = &v
}

func (o Product202309PublishGlobalProductResponseDataPublishResultFailReasons) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Product202309PublishGlobalProductResponseDataPublishResultFailReasons) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Product202309PublishGlobalProductResponseDataPublishResultFailReasons) UnmarshalJSON(data []byte) (err error) {
	varProduct202309PublishGlobalProductResponseDataPublishResultFailReasons := _Product202309PublishGlobalProductResponseDataPublishResultFailReasons{}

	err = json.Unmarshal(data, &varProduct202309PublishGlobalProductResponseDataPublishResultFailReasons)

	if err != nil {
		return err
	}

	*o = Product202309PublishGlobalProductResponseDataPublishResultFailReasons(varProduct202309PublishGlobalProductResponseDataPublishResultFailReasons)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "message")
		o.AdditionalProperties = additionalProperties
	}
	return err
}

type NullableProduct202309PublishGlobalProductResponseDataPublishResultFailReasons struct {
	value *Product202309PublishGlobalProductResponseDataPublishResultFailReasons
	isSet bool
}

func (v NullableProduct202309PublishGlobalProductResponseDataPublishResultFailReasons) Get() *Product202309PublishGlobalProductResponseDataPublishResultFailReasons {
	return v.value
}

func (v *NullableProduct202309PublishGlobalProductResponseDataPublishResultFailReasons) Set(val *Product202309PublishGlobalProductResponseDataPublishResultFailReasons) {
	v.value = val
	v.isSet = true
}

func (v NullableProduct202309PublishGlobalProductResponseDataPublishResultFailReasons) IsSet() bool {
	return v.isSet
}

func (v *NullableProduct202309PublishGlobalProductResponseDataPublishResultFailReasons) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProduct202309PublishGlobalProductResponseDataPublishResultFailReasons(val *Product202309PublishGlobalProductResponseDataPublishResultFailReasons) *NullableProduct202309PublishGlobalProductResponseDataPublishResultFailReasons {
	return &NullableProduct202309PublishGlobalProductResponseDataPublishResultFailReasons{value: val, isSet: true}
}

func (v NullableProduct202309PublishGlobalProductResponseDataPublishResultFailReasons) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProduct202309PublishGlobalProductResponseDataPublishResultFailReasons) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
