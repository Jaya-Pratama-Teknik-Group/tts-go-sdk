/*
tiktok shop openapi

sdk for apis

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package analytics_v202508

import (
	"encoding/json"
	"github.com/Jaya-Pratama-Teknik-Group/tts-go-sdk/utils"
)

// checks if the Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals{}

// Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals struct for Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals
type Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals struct {
	// The percentage of viewers who clicked on product links after seeing them in LIVEs. Number of clicks divided by the number of views, multiplied by 100.
	ClickThroughRate *string `json:"click_through_rate,omitempty"`
	// The percentage of times viewers clicked product links in LIVEs and placed a direct order.
	ClickToOrderRate *string `json:"click_to_order_rate,omitempty"`
	// The total number of customers who placed orders directly from all LIVEs.
	Customers *int64 `json:"customers,omitempty"`
	// End date of the interval (ISO 8601 YYYY-MM-DD format) in shop registered timezone, exclusive.
	EndDate *string                                                                                     `json:"end_date,omitempty"`
	Gmv     *Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervalsGmv `json:"gmv,omitempty"`
	// The total number of paid orders from all LIVEs during the selected period. This includes SKUs that represent unique product variations like size, colour or model. Example: If a customer orders 3 units of SKU A and 2 units of SKU B, the SKU orders would be 2.
	SkuOrders *int64 `json:"sku_orders,omitempty"`
	// Start date of the interval (ISO 8601 YYYY-MM-DD format) in shop registered timezone, inclusive.
	StartDate *string `json:"start_date,omitempty"`
	// The total number of individual items sold from all LIVEs. Example: If a customer buys 3 units of SKU A and 2 units of SKU B, the items sold would be 5.
	UnitsSold            *int64 `json:"units_sold,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals

// NewAnalytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals instantiates a new Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnalytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals() *Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals {
	this := Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals{}
	return &this
}

// NewAnalytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervalsWithDefaults instantiates a new Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnalytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervalsWithDefaults() *Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals {
	this := Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals{}
	return &this
}

// GetClickThroughRate returns the ClickThroughRate field value if set, zero value otherwise.
func (o *Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) GetClickThroughRate() string {
	if o == nil || utils.IsNil(o.ClickThroughRate) {
		var ret string
		return ret
	}
	return *o.ClickThroughRate
}

// GetClickThroughRateOk returns a tuple with the ClickThroughRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) GetClickThroughRateOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ClickThroughRate) {
		return nil, false
	}
	return o.ClickThroughRate, true
}

// HasClickThroughRate returns a boolean if a field has been set.
func (o *Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) HasClickThroughRate() bool {
	if o != nil && !utils.IsNil(o.ClickThroughRate) {
		return true
	}

	return false
}

// SetClickThroughRate gets a reference to the given string and assigns it to the ClickThroughRate field.
func (o *Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) SetClickThroughRate(v string) {
	o.ClickThroughRate = &v
}

// GetClickToOrderRate returns the ClickToOrderRate field value if set, zero value otherwise.
func (o *Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) GetClickToOrderRate() string {
	if o == nil || utils.IsNil(o.ClickToOrderRate) {
		var ret string
		return ret
	}
	return *o.ClickToOrderRate
}

// GetClickToOrderRateOk returns a tuple with the ClickToOrderRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) GetClickToOrderRateOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ClickToOrderRate) {
		return nil, false
	}
	return o.ClickToOrderRate, true
}

// HasClickToOrderRate returns a boolean if a field has been set.
func (o *Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) HasClickToOrderRate() bool {
	if o != nil && !utils.IsNil(o.ClickToOrderRate) {
		return true
	}

	return false
}

// SetClickToOrderRate gets a reference to the given string and assigns it to the ClickToOrderRate field.
func (o *Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) SetClickToOrderRate(v string) {
	o.ClickToOrderRate = &v
}

// GetCustomers returns the Customers field value if set, zero value otherwise.
func (o *Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) GetCustomers() int64 {
	if o == nil || utils.IsNil(o.Customers) {
		var ret int64
		return ret
	}
	return *o.Customers
}

// GetCustomersOk returns a tuple with the Customers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) GetCustomersOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Customers) {
		return nil, false
	}
	return o.Customers, true
}

// HasCustomers returns a boolean if a field has been set.
func (o *Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) HasCustomers() bool {
	if o != nil && !utils.IsNil(o.Customers) {
		return true
	}

	return false
}

// SetCustomers gets a reference to the given int64 and assigns it to the Customers field.
func (o *Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) SetCustomers(v int64) {
	o.Customers = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) GetEndDate() string {
	if o == nil || utils.IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) GetEndDateOk() (*string, bool) {
	if o == nil || utils.IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) HasEndDate() bool {
	if o != nil && !utils.IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) SetEndDate(v string) {
	o.EndDate = &v
}

// GetGmv returns the Gmv field value if set, zero value otherwise.
func (o *Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) GetGmv() Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervalsGmv {
	if o == nil || utils.IsNil(o.Gmv) {
		var ret Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervalsGmv
		return ret
	}
	return *o.Gmv
}

// GetGmvOk returns a tuple with the Gmv field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) GetGmvOk() (*Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervalsGmv, bool) {
	if o == nil || utils.IsNil(o.Gmv) {
		return nil, false
	}
	return o.Gmv, true
}

// HasGmv returns a boolean if a field has been set.
func (o *Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) HasGmv() bool {
	if o != nil && !utils.IsNil(o.Gmv) {
		return true
	}

	return false
}

// SetGmv gets a reference to the given Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervalsGmv and assigns it to the Gmv field.
func (o *Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) SetGmv(v Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervalsGmv) {
	o.Gmv = &v
}

// GetSkuOrders returns the SkuOrders field value if set, zero value otherwise.
func (o *Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) GetSkuOrders() int64 {
	if o == nil || utils.IsNil(o.SkuOrders) {
		var ret int64
		return ret
	}
	return *o.SkuOrders
}

// GetSkuOrdersOk returns a tuple with the SkuOrders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) GetSkuOrdersOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.SkuOrders) {
		return nil, false
	}
	return o.SkuOrders, true
}

// HasSkuOrders returns a boolean if a field has been set.
func (o *Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) HasSkuOrders() bool {
	if o != nil && !utils.IsNil(o.SkuOrders) {
		return true
	}

	return false
}

// SetSkuOrders gets a reference to the given int64 and assigns it to the SkuOrders field.
func (o *Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) SetSkuOrders(v int64) {
	o.SkuOrders = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) GetStartDate() string {
	if o == nil || utils.IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) GetStartDateOk() (*string, bool) {
	if o == nil || utils.IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) HasStartDate() bool {
	if o != nil && !utils.IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) SetStartDate(v string) {
	o.StartDate = &v
}

// GetUnitsSold returns the UnitsSold field value if set, zero value otherwise.
func (o *Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) GetUnitsSold() int64 {
	if o == nil || utils.IsNil(o.UnitsSold) {
		var ret int64
		return ret
	}
	return *o.UnitsSold
}

// GetUnitsSoldOk returns a tuple with the UnitsSold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) GetUnitsSoldOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.UnitsSold) {
		return nil, false
	}
	return o.UnitsSold, true
}

// HasUnitsSold returns a boolean if a field has been set.
func (o *Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) HasUnitsSold() bool {
	if o != nil && !utils.IsNil(o.UnitsSold) {
		return true
	}

	return false
}

// SetUnitsSold gets a reference to the given int64 and assigns it to the UnitsSold field.
func (o *Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) SetUnitsSold(v int64) {
	o.UnitsSold = &v
}

func (o Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.ClickThroughRate) {
		toSerialize["click_through_rate"] = o.ClickThroughRate
	}
	if !utils.IsNil(o.ClickToOrderRate) {
		toSerialize["click_to_order_rate"] = o.ClickToOrderRate
	}
	if !utils.IsNil(o.Customers) {
		toSerialize["customers"] = o.Customers
	}
	if !utils.IsNil(o.EndDate) {
		toSerialize["end_date"] = o.EndDate
	}
	if !utils.IsNil(o.Gmv) {
		toSerialize["gmv"] = o.Gmv
	}
	if !utils.IsNil(o.SkuOrders) {
		toSerialize["sku_orders"] = o.SkuOrders
	}
	if !utils.IsNil(o.StartDate) {
		toSerialize["start_date"] = o.StartDate
	}
	if !utils.IsNil(o.UnitsSold) {
		toSerialize["units_sold"] = o.UnitsSold
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) UnmarshalJSON(data []byte) (err error) {
	varAnalytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals := _Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals{}

	err = json.Unmarshal(data, &varAnalytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals)

	if err != nil {
		return err
	}

	*o = Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals(varAnalytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "click_through_rate")
		delete(additionalProperties, "click_to_order_rate")
		delete(additionalProperties, "customers")
		delete(additionalProperties, "end_date")
		delete(additionalProperties, "gmv")
		delete(additionalProperties, "sku_orders")
		delete(additionalProperties, "start_date")
		delete(additionalProperties, "units_sold")
		o.AdditionalProperties = additionalProperties
	}
	return err
}

type NullableAnalytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals struct {
	value *Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals
	isSet bool
}

func (v NullableAnalytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) Get() *Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals {
	return v.value
}

func (v *NullableAnalytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) Set(val *Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals(val *Analytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) *NullableAnalytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals {
	return &NullableAnalytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals{value: val, isSet: true}
}

func (v NullableAnalytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalytics202508GetShopLIVEPerformanceOverviewResponseDataPerformanceComparisonIntervals) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
