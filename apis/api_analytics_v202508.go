/*
tiktok shop openapi

sdk for apis

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apis

import (
    "bytes"
    "context"
    "io"
    "net/http"
    "net/url"

    "github.com/Jaya-Pratama-Teknik-Group/tts-go-sdk/models/analytics/v202508"
)


// AnalyticsV202508APIService AnalyticsV202508API service
type AnalyticsV202508APIService service

type ApiAnalytics202508ShopLivesOverviewPerformanceGetRequest struct {
    ctx context.Context
    ApiService *AnalyticsV202508APIService
    startDateGe *string
    endDateLt *string
    xTtsAccessToken *string
    contentType *string
    withComparison *bool
    granularity *string
    currency *string
    accountType *string
    shopCipher *string
}

// Start date (ISO 8601 YYYY-MM-DD format) in shop registered timezone. In the parameter name, \&quot;ge\&quot; refers to \&quot;greater than or equal to\&quot; (inclusive)
func (r ApiAnalytics202508ShopLivesOverviewPerformanceGetRequest) StartDateGe(startDateGe string) ApiAnalytics202508ShopLivesOverviewPerformanceGetRequest {
    r.startDateGe = &startDateGe
    return r
}
// End date (ISO 8601 YYYY-MM-DD format) in shop registered timezone. In the parameter name, \&quot;lt\&quot; refers to \&quot;less than\&quot; (exclusive)
func (r ApiAnalytics202508ShopLivesOverviewPerformanceGetRequest) EndDateLt(endDateLt string) ApiAnalytics202508ShopLivesOverviewPerformanceGetRequest {
    r.endDateLt = &endDateLt
    return r
}
// 
func (r ApiAnalytics202508ShopLivesOverviewPerformanceGetRequest) XTtsAccessToken(xTtsAccessToken string) ApiAnalytics202508ShopLivesOverviewPerformanceGetRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiAnalytics202508ShopLivesOverviewPerformanceGetRequest) ContentType(contentType string) ApiAnalytics202508ShopLivesOverviewPerformanceGetRequest {
    r.contentType = &contentType
    return r
}
// Whether previous period data is returned for comparison. Available values: true, false Default value: false The previous period has the same length and granularity as the current period with end time being the same as the start time of the current period. Example: If start_time_ge &#x3D; 2024-04-01 and end_time_lt &#x3D; 2024-04-08, the previous period data will be from 2024-03-25 to 2024-04-01.
func (r ApiAnalytics202508ShopLivesOverviewPerformanceGetRequest) WithComparison(withComparison bool) ApiAnalytics202508ShopLivesOverviewPerformanceGetRequest {
    r.withComparison = &withComparison
    return r
}
// Granularity of the data. Available values: ALL, 1D Default value: ALL
func (r ApiAnalytics202508ShopLivesOverviewPerformanceGetRequest) Granularity(granularity string) ApiAnalytics202508ShopLivesOverviewPerformanceGetRequest {
    r.granularity = &granularity
    return r
}
// Currency. Available values: USD, LOCAL Default value: LOCAL
func (r ApiAnalytics202508ShopLivesOverviewPerformanceGetRequest) Currency(currency string) ApiAnalytics202508ShopLivesOverviewPerformanceGetRequest {
    r.currency = &currency
    return r
}
// Types of the accounts under which videos were created. Available values: ALL, OFFICIAL_ACCOUNTS, MARKETING_ACCOUNTS, AFFILIATE_ACCOUNTS Default value: ALL
func (r ApiAnalytics202508ShopLivesOverviewPerformanceGetRequest) AccountType(accountType string) ApiAnalytics202508ShopLivesOverviewPerformanceGetRequest {
    r.accountType = &accountType
    return r
}
// 
func (r ApiAnalytics202508ShopLivesOverviewPerformanceGetRequest) ShopCipher(shopCipher string) ApiAnalytics202508ShopLivesOverviewPerformanceGetRequest {
    r.shopCipher = &shopCipher
    return r
}
func (r ApiAnalytics202508ShopLivesOverviewPerformanceGetRequest) Execute() (*analytics_v202508.Analytics202508GetShopLIVEPerformanceOverviewResponse, *http.Response, error) {
    return r.ApiService.Analytics202508ShopLivesOverviewPerformanceGetExecute(r)
}

/*
Analytics202508ShopLivesOverviewPerformanceGet GetShopLIVEPerformanceOverview
Returns overall performance metrics for all LIVE stream sessions under a certain shop.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiAnalytics202508ShopLivesOverviewPerformanceGetRequest
*/
func (a *AnalyticsV202508APIService) Analytics202508ShopLivesOverviewPerformanceGet(ctx context.Context) ApiAnalytics202508ShopLivesOverviewPerformanceGetRequest {
    return ApiAnalytics202508ShopLivesOverviewPerformanceGetRequest{
        ApiService: a,
        ctx: ctx,
    }
}

// Execute executes the request
//  @return Analytics202508GetShopLIVEPerformanceOverviewResponse
func (a *AnalyticsV202508APIService) Analytics202508ShopLivesOverviewPerformanceGetExecute(r ApiAnalytics202508ShopLivesOverviewPerformanceGetRequest) (*analytics_v202508.Analytics202508GetShopLIVEPerformanceOverviewResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodGet
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *analytics_v202508.Analytics202508GetShopLIVEPerformanceOverviewResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsV202508APIService.Analytics202508ShopLivesOverviewPerformanceGet")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/analytics/202508/shop_lives/overview_performance"

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.startDateGe == nil {
        return localVarReturnValue, nil, reportError("startDateGe is required and must be specified")
    }
    if r.endDateLt == nil {
        return localVarReturnValue, nil, reportError("endDateLt is required and must be specified")
    }
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    parameterAddToHeaderOrQuery(localVarQueryParams, "start_date_ge", r.startDateGe, "")
    parameterAddToHeaderOrQuery(localVarQueryParams, "end_date_lt", r.endDateLt, "")
    if r.withComparison != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "with_comparison", r.withComparison, "")
    }
    if r.granularity != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "granularity", r.granularity, "")
    }
    if r.currency != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "currency", r.currency, "")
    }
    if r.accountType != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "account_type", r.accountType, "")
    }
    if r.shopCipher != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "shop_cipher", r.shopCipher, "")
    }
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAnalytics202508ShopLivesPerformanceGetRequest struct {
    ctx context.Context
    ApiService *AnalyticsV202508APIService
    startDateGe *string
    endDateLt *string
    xTtsAccessToken *string
    contentType *string
    pageSize *int32
    sortField *string
    sortOrder *string
    currency *string
    pageToken *string
    accountType *string
    shopCipher *string
}

// Start date (ISO 8601 YYYY-MM-DD format) in shop registered timezone. In the parameter name, \&quot;ge\&quot; refers to \&quot;greater than or equal to\&quot; (inclusive)
func (r ApiAnalytics202508ShopLivesPerformanceGetRequest) StartDateGe(startDateGe string) ApiAnalytics202508ShopLivesPerformanceGetRequest {
    r.startDateGe = &startDateGe
    return r
}
// End date (ISO 8601 YYYY-MM-DD format) in shop registered timezone. In the parameter name, \&quot;lt\&quot; refers to \&quot;less than\&quot; (exclusive)
func (r ApiAnalytics202508ShopLivesPerformanceGetRequest) EndDateLt(endDateLt string) ApiAnalytics202508ShopLivesPerformanceGetRequest {
    r.endDateLt = &endDateLt
    return r
}
// 
func (r ApiAnalytics202508ShopLivesPerformanceGetRequest) XTtsAccessToken(xTtsAccessToken string) ApiAnalytics202508ShopLivesPerformanceGetRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiAnalytics202508ShopLivesPerformanceGetRequest) ContentType(contentType string) ApiAnalytics202508ShopLivesPerformanceGetRequest {
    r.contentType = &contentType
    return r
}
// Number of products per page. Max value: 100 Default value: 10
func (r ApiAnalytics202508ShopLivesPerformanceGetRequest) PageSize(pageSize int32) ApiAnalytics202508ShopLivesPerformanceGetRequest {
    r.pageSize = &pageSize
    return r
}
// Field to sort on. Default: gmv Available values: - gmv - products_added - different_products_sold - sku_orders - unit_sold - customers - 24h_live_gmv
func (r ApiAnalytics202508ShopLivesPerformanceGetRequest) SortField(sortField string) ApiAnalytics202508ShopLivesPerformanceGetRequest {
    r.sortField = &sortField
    return r
}
// Sort direction. Available values: ASC, DESC Default value: DESC
func (r ApiAnalytics202508ShopLivesPerformanceGetRequest) SortOrder(sortOrder string) ApiAnalytics202508ShopLivesPerformanceGetRequest {
    r.sortOrder = &sortOrder
    return r
}
// Currency. Available values: USD, LOCAL Default value: LOCAL
func (r ApiAnalytics202508ShopLivesPerformanceGetRequest) Currency(currency string) ApiAnalytics202508ShopLivesPerformanceGetRequest {
    r.currency = &currency
    return r
}
// Page token, indicating the current position. Used for requesting next page data. Leave this field empty for first time queries.
func (r ApiAnalytics202508ShopLivesPerformanceGetRequest) PageToken(pageToken string) ApiAnalytics202508ShopLivesPerformanceGetRequest {
    r.pageToken = &pageToken
    return r
}
// Types of the accounts under which videos were created. Available values: ALL, OFFICIAL_ACCOUNTS, MARKETING_ACCOUNTS, AFFILIATE_ACCOUNTS Default value: ALL
func (r ApiAnalytics202508ShopLivesPerformanceGetRequest) AccountType(accountType string) ApiAnalytics202508ShopLivesPerformanceGetRequest {
    r.accountType = &accountType
    return r
}
// 
func (r ApiAnalytics202508ShopLivesPerformanceGetRequest) ShopCipher(shopCipher string) ApiAnalytics202508ShopLivesPerformanceGetRequest {
    r.shopCipher = &shopCipher
    return r
}
func (r ApiAnalytics202508ShopLivesPerformanceGetRequest) Execute() (*analytics_v202508.Analytics202508GetShopLIVEPerformanceListResponse, *http.Response, error) {
    return r.ApiService.Analytics202508ShopLivesPerformanceGetExecute(r)
}

/*
Analytics202508ShopLivesPerformanceGet GetShopLIVEPerformanceList
Returns a list of LIVE stream sessions and associated metrics for a shop.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiAnalytics202508ShopLivesPerformanceGetRequest
*/
func (a *AnalyticsV202508APIService) Analytics202508ShopLivesPerformanceGet(ctx context.Context) ApiAnalytics202508ShopLivesPerformanceGetRequest {
    return ApiAnalytics202508ShopLivesPerformanceGetRequest{
        ApiService: a,
        ctx: ctx,
    }
}

// Execute executes the request
//  @return Analytics202508GetShopLIVEPerformanceListResponse
func (a *AnalyticsV202508APIService) Analytics202508ShopLivesPerformanceGetExecute(r ApiAnalytics202508ShopLivesPerformanceGetRequest) (*analytics_v202508.Analytics202508GetShopLIVEPerformanceListResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodGet
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *analytics_v202508.Analytics202508GetShopLIVEPerformanceListResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalyticsV202508APIService.Analytics202508ShopLivesPerformanceGet")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/analytics/202508/shop_lives/performance"

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.startDateGe == nil {
        return localVarReturnValue, nil, reportError("startDateGe is required and must be specified")
    }
    if r.endDateLt == nil {
        return localVarReturnValue, nil, reportError("endDateLt is required and must be specified")
    }
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    parameterAddToHeaderOrQuery(localVarQueryParams, "start_date_ge", r.startDateGe, "")
    parameterAddToHeaderOrQuery(localVarQueryParams, "end_date_lt", r.endDateLt, "")
    if r.pageSize != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "")
    }
    if r.sortField != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "sort_field", r.sortField, "")
    }
    if r.sortOrder != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "sort_order", r.sortOrder, "")
    }
    if r.currency != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "currency", r.currency, "")
    }
    if r.pageToken != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "page_token", r.pageToken, "")
    }
    if r.accountType != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "account_type", r.accountType, "")
    }
    if r.shopCipher != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "shop_cipher", r.shopCipher, "")
    }
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}
